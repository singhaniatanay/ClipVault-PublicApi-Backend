name: Database Migrations

on:
  push:
    branches: [main, develop]
    paths: ['db/**']
  pull_request:
    branches: [main, develop]
    paths: ['db/**']
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Target environment (staging/production)'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  verify-migrations:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Sqitch
        run: |
          sudo apt-get update
          sudo apt-get install -y sqitch libdbd-pg-perl postgresql-client
          
      - name: Verify migration syntax
        run: |
          cd db/
          sqitch verify --dry-run
          
      - name: Check migration plan
        run: |
          cd db/
          echo "‚úÖ Migration plan verification:"
          cat sqitch.plan
          echo ""
          echo "‚úÖ Migration files exist:"
          ls -la deploy/ revert/ verify/

  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.target_environment == 'staging')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Sqitch
        run: |
          sudo apt-get update
          sudo apt-get install -y sqitch libdbd-pg-perl postgresql-client
          
      - name: Extract project reference from Supabase URL
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        run: |
          PROJECT_REF=$(echo "$SUPABASE_URL" | sed 's|https://||' | sed 's|\.supabase\.co||')
          echo "PROJECT_REF=$PROJECT_REF" >> $GITHUB_ENV
          
      - name: Deploy migrations to staging
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          cd db/
          # Build connection string (same format as our API)
          export DATABASE_URL="postgresql://postgres.$PROJECT_REF:$SUPABASE_DB_PASSWORD@aws-0-us-east-2.pooler.supabase.com:6543/postgres"
          
          echo "üöÄ Deploying migrations to staging database..."
          sqitch deploy $DATABASE_URL
          
          echo "‚úÖ Verifying migrations..."
          sqitch verify $DATABASE_URL
          
      - name: Migration success notification
        if: success()
        run: |
          echo "‚úÖ Staging database migrations deployed successfully!"
          echo "üîó Check Supabase Studio: ${{ secrets.SUPABASE_URL }}"

  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.target_environment == 'production')
    environment: production
    needs: []  # No dependencies for main branch
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Sqitch
        run: |
          sudo apt-get update
          sudo apt-get install -y sqitch libdbd-pg-perl postgresql-client
          
      - name: Extract project reference from Supabase URL
        env:
          SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
        run: |
          PROJECT_REF=$(echo "$SUPABASE_URL" | sed 's|https://||' | sed 's|\.supabase\.co||')
          echo "PROJECT_REF=$PROJECT_REF" >> $GITHUB_ENV
          
      - name: Backup check (dry run revert)
        env:
          SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.PRODUCTION_SUPABASE_DB_PASSWORD }}
        run: |
          cd db/
          export DATABASE_URL="postgresql://postgres.$PROJECT_REF:$SUPABASE_DB_PASSWORD@aws-0-us-east-2.pooler.supabase.com:6543/postgres"
          
          echo "üîç Checking rollback capability..."
          sqitch revert --to @HEAD~1 --dry-run $DATABASE_URL || echo "No previous migrations to revert"
          
      - name: Deploy migrations to production
        env:
          SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.PRODUCTION_SUPABASE_DB_PASSWORD }}
        run: |
          cd db/
          export DATABASE_URL="postgresql://postgres.$PROJECT_REF:$SUPABASE_DB_PASSWORD@aws-0-us-east-2.pooler.supabase.com:6543/postgres"
          
          echo "üöÄ Deploying migrations to production database..."
          sqitch deploy $DATABASE_URL
          
          echo "‚úÖ Verifying migrations..."
          sqitch verify $DATABASE_URL
          
      - name: Production migration success
        if: success()
        run: |
          echo "‚úÖ Production database migrations deployed successfully!"
          echo "üîó Check Supabase Studio: ${{ secrets.PRODUCTION_SUPABASE_URL }}"
          
      - name: Migration failure rollback
        if: failure()
        env:
          SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.PRODUCTION_SUPABASE_DB_PASSWORD }}
        run: |
          cd db/
          export DATABASE_URL="postgresql://postgres.$PROJECT_REF:$SUPABASE_DB_PASSWORD@aws-0-us-east-2.pooler.supabase.com:6543/postgres"
          
          echo "‚ùå Migration failed, attempting rollback..."
          sqitch revert --to @HEAD~1 $DATABASE_URL || echo "Rollback failed - manual intervention required" 