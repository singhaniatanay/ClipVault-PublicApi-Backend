name: Database Migrations

on:
  push:
    branches: [main-v3, develop]
    paths: ['db/**']
  pull_request:
    branches: [main-v3, develop]
    paths: ['db/**']
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Target environment (staging/production)'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  verify-migrations:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Sqitch
        run: |
          sudo apt-get update
          sudo apt-get install -y sqitch libdbd-pg-perl postgresql-client
          
      - name: Verify migration files
        run: |
          cd db/
          # Check that all required migration files exist
          echo "Checking migration file structure..."
          
          # Verify all migrations in plan have corresponding files
          while IFS= read -r line; do
            if [[ $line =~ ^([a-zA-Z0-9_]+) ]]; then
              migration="${BASH_REMATCH[1]}"
              echo "Checking migration: $migration"
              
              if [[ ! -f "deploy/$migration.sql" ]]; then
                echo "‚ùå Missing deploy file: deploy/$migration.sql"
                exit 1
              fi
              
              if [[ ! -f "revert/$migration.sql" ]]; then
                echo "‚ùå Missing revert file: revert/$migration.sql"
                exit 1
              fi
              
              if [[ ! -f "verify/$migration.sql" ]]; then
                echo "‚ùå Missing verify file: verify/$migration.sql"
                exit 1
              fi
              
              echo "‚úÖ $migration - all files present"
            fi
          done < <(grep -v '^%\|^$\|^#' sqitch.plan)
          
          echo "‚úÖ All migration files are present and accounted for"
          
      - name: Check migration plan
        run: |
          cd db/
          echo "‚úÖ Migration plan verification:"
          cat sqitch.plan
          echo ""
          echo "‚úÖ Migration files exist:"
          ls -la deploy/ revert/ verify/

  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.target_environment == 'staging')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Sqitch
        run: |
          sudo apt-get update
          sudo apt-get install -y sqitch libdbd-pg-perl postgresql-client
          
      - name: Extract project reference from Supabase URL
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        run: |
          if [[ -z "$SUPABASE_URL" ]]; then
            echo "‚ùå SUPABASE_URL secret is not set!"
            echo "Please configure the SUPABASE_URL secret in your repository settings."
            exit 1
          fi
          
          echo "üîó Supabase URL: $SUPABASE_URL"
          PROJECT_REF=$(echo "$SUPABASE_URL" | sed 's|https://||' | sed 's|\.supabase\.co||')
          
          if [[ -z "$PROJECT_REF" ]]; then
            echo "‚ùå Failed to extract project reference from URL: $SUPABASE_URL"
            echo "Expected format: https://your-project-id.supabase.co"
            exit 1
          fi
          
          echo "üìã Project reference: $PROJECT_REF"
          echo "PROJECT_REF=$PROJECT_REF" >> $GITHUB_ENV
          
      - name: Deploy migrations to staging
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          if [[ -z "$SUPABASE_DB_PASSWORD" ]]; then
            echo "‚ùå SUPABASE_DB_PASSWORD secret is not set!"
            echo "Please configure the SUPABASE_DB_PASSWORD secret in your repository settings."
            exit 1
          fi
          
          if [[ -z "$PROJECT_REF" ]]; then
            echo "‚ùå PROJECT_REF environment variable is not set!"
            exit 1
          fi
          
          cd db/
          # Build connection string (same format as our API)
          # Note: We don't echo this to avoid GitHub secret masking issues
          export DATABASE_URL="postgresql://postgres.${PROJECT_REF}:${SUPABASE_DB_PASSWORD}@aws-0-us-east-2.pooler.supabase.com:6543/postgres"          

          echo "üîó Connecting to database..."
          echo "üìã Project: $PROJECT_REF"
          echo "üåê Host: aws-0-us-east-2.pooler.supabase.com:6543"
          echo "üîí Connection string built (password masked for security)"
          
          echo "üìä Current migration status:"
          sqitch status "$DATABASE_URL" || echo "No previous migrations"
          
          echo "üöÄ Deploying migrations to staging database..."
          sqitch deploy "$DATABASE_URL"
          
          echo "‚úÖ Verifying migrations..."
          sqitch verify "$DATABASE_URL"
          
      - name: Migration success notification
        if: success()
        run: |
          echo "‚úÖ Staging database migrations deployed successfully!"
          echo "üîó Check Supabase Studio: ${{ secrets.SUPABASE_URL }}"

  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main-v3' || (github.event_name == 'workflow_dispatch' && github.event.inputs.target_environment == 'production')
    environment: production
    needs: []  # No dependencies for main branch
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Sqitch
        run: |
          sudo apt-get update
          sudo apt-get install -y sqitch libdbd-pg-perl postgresql-client
          
      - name: Extract project reference from Supabase URL
        env:
          SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
        run: |
          if [[ -z "$SUPABASE_URL" ]]; then
            echo "‚ùå PRODUCTION_SUPABASE_URL secret is not set!"
            echo "Please configure the PRODUCTION_SUPABASE_URL secret in your repository settings."
            exit 1
          fi
          
          echo "üîó Production Supabase URL: $SUPABASE_URL"
          PROJECT_REF=$(echo "$SUPABASE_URL" | sed 's|https://||' | sed 's|\.supabase\.co||')
          
          if [[ -z "$PROJECT_REF" ]]; then
            echo "‚ùå Failed to extract project reference from URL: $SUPABASE_URL"
            echo "Expected format: https://your-project-id.supabase.co"
            exit 1
          fi
          
          echo "üìã Production project reference: $PROJECT_REF"
          echo "PROJECT_REF=$PROJECT_REF" >> $GITHUB_ENV
          
      - name: Check migration status
        env:
          SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.PRODUCTION_SUPABASE_DB_PASSWORD }}
        run: |
          if [[ -z "$SUPABASE_DB_PASSWORD" ]]; then
            echo "‚ùå PRODUCTION_SUPABASE_DB_PASSWORD secret is not set!"
            exit 1
          fi
          
          if [[ -z "$PROJECT_REF" ]]; then
            echo "‚ùå PROJECT_REF environment variable is not set!"
            exit 1
          fi
          
          cd db/
          # Build connection string (avoid logging to prevent secret masking issues)
          export DATABASE_URL="db:pg://postgres.${PROJECT_REF}:${SUPABASE_DB_PASSWORD}@aws-0-us-east-2.pooler.supabase.com:6543/postgres"
          
          echo "üîç Checking current migration status..."
          echo "üîí Using connection to $PROJECT_REF database..."
          sqitch status "$DATABASE_URL" || echo "No previous migrations deployed"
          
          echo "üìã Planned migrations:"
          cat sqitch.plan
          
      - name: Deploy migrations to production
        env:
          SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.PRODUCTION_SUPABASE_DB_PASSWORD }}
        run: |
          cd db/
          # Build connection string (avoid logging to prevent secret masking issues)
          export DATABASE_URL="db:pg://postgres.${PROJECT_REF}:${SUPABASE_DB_PASSWORD}@aws-0-us-east-2.pooler.supabase.com:6543/postgres"
          
          echo "üîó Connecting to production database..."
          echo "üìã Project: $PROJECT_REF"
          echo "üåê Host: aws-0-us-east-2.pooler.supabase.com:6543"
          echo "üîí Production connection string built (password masked for security)"
          
          echo "üöÄ Deploying migrations to production database..."
          sqitch deploy "$DATABASE_URL"
          
          echo "‚úÖ Verifying migrations..."
          sqitch verify "$DATABASE_URL"
          
      - name: Production migration success
        if: success()
        run: |
          echo "‚úÖ Production database migrations deployed successfully!"
          echo "üîó Check Supabase Studio: ${{ secrets.PRODUCTION_SUPABASE_URL }}"
          
      - name: Migration failure rollback
        if: failure()
        env:
          SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.PRODUCTION_SUPABASE_DB_PASSWORD }}
        run: |
          cd db/
          # Build connection string for rollback
          export DATABASE_URL="db:pg://postgres.${PROJECT_REF}:${SUPABASE_DB_PASSWORD}@aws-0-us-east-2.pooler.supabase.com:6543/postgres"
          
          echo "‚ùå Migration failed, attempting rollback..."
          echo "üîÑ Rolling back to previous migration on $PROJECT_REF..."
          sqitch revert --to @HEAD~1 "$DATABASE_URL" || echo "Rollback failed - manual intervention required" 