name: Database Migrations

on:
  push:
    branches: [main-v3]
    paths: ['db/**']
  pull_request:
    branches: [main-v3]
    paths: ['db/**']
  workflow_dispatch:

jobs:
  verify-migrations:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Sqitch
        run: |
          sudo apt-get update
          sudo apt-get install -y sqitch libdbd-pg-perl postgresql-client
          
      - name: Verify migration files
        run: |
          cd db/
          echo "Checking migration file structure..."
          
          # Verify all migrations in plan have corresponding files
          while IFS= read -r line; do
            if [[ $line =~ ^([a-zA-Z0-9_]+) ]]; then
              migration="${BASH_REMATCH[1]}"
              echo "Checking migration: $migration"
              
              if [[ ! -f "deploy/$migration.sql" ]]; then
                echo "‚ùå Missing deploy file: deploy/$migration.sql"
                exit 1
              fi
              
              if [[ ! -f "revert/$migration.sql" ]]; then
                echo "‚ùå Missing revert file: revert/$migration.sql"
                exit 1
              fi
              
              if [[ ! -f "verify/$migration.sql" ]]; then
                echo "‚ùå Missing verify file: verify/$migration.sql"
                exit 1
              fi
              
              echo "‚úÖ $migration - all files present"
            fi
          done < <(grep -v '^%\|^$\|^#' sqitch.plan)
          
          echo "‚úÖ All migration files are present and accounted for"
          
      - name: Check migration plan
        run: |
          cd db/
          echo "‚úÖ Migration plan verification:"
          cat sqitch.plan

  deploy-database:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main-v3' || github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Sqitch
        run: |
          sudo apt-get update
          sudo apt-get install -y sqitch libdbd-pg-perl postgresql-client
          
      - name: Extract project reference from Supabase URL
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        run: |
          if [[ -z "$SUPABASE_URL" ]]; then
            echo "‚ùå SUPABASE_URL secret is not set!"
            exit 1
          fi
          
          PROJECT_REF=$(echo "$SUPABASE_URL" | sed 's|https://||' | sed 's|\.supabase\.co||')
          
          if [[ -z "$PROJECT_REF" ]]; then
            echo "‚ùå Failed to extract project reference from URL: $SUPABASE_URL"
            exit 1
          fi
          
          echo "üìã Project: $PROJECT_REF"
          echo "PROJECT_REF=$PROJECT_REF" >> $GITHUB_ENV
          
      - name: Deploy migrations
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          if [[ -z "$SUPABASE_DB_PASSWORD" ]]; then
            echo "‚ùå SUPABASE_DB_PASSWORD secret is not set!"
            exit 1
          fi
          
          cd db/
          export DATABASE_URL="db:pg://postgres.${PROJECT_REF}:${SUPABASE_DB_PASSWORD}@aws-0-us-east-2.pooler.supabase.com:6543/postgres"
          
          echo "üîó Connecting to database..."
          echo "üìã Project: $PROJECT_REF"
          echo "üåê Host: aws-0-us-east-2.pooler.supabase.com:6543"
          
          echo "üìä Current migration status:"
          sqitch status "$DATABASE_URL" || echo "No previous migrations"
          
          echo "üöÄ Deploying migrations..."
          sqitch deploy "$DATABASE_URL"
          
          echo "‚úÖ Verifying migrations..."
          sqitch verify "$DATABASE_URL"
          
          echo "‚úÖ Database migrations completed successfully!"
          
      - name: Migration failure rollback
        if: failure()
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
        run: |
          cd db/
          export DATABASE_URL="db:pg://postgres.${PROJECT_REF}:${SUPABASE_DB_PASSWORD}@aws-0-us-east-2.pooler.supabase.com:6543/postgres"
          
          echo "‚ùå Migration failed, attempting rollback..."
          sqitch revert --to @HEAD~1 "$DATABASE_URL" || echo "Rollback failed - manual intervention required" 