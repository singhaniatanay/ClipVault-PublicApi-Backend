from pydantic import BaseModel, HttpUrl, Field, field_validator
from typing import Literal, Optional, List
import re

# Supported domains for MVP (can be expanded)
SUPPORTED_DOMAINS = [
    r"instagram\.com",
    r"reddit\.com",
    r"youtube\.com",
    r"youtu\.be",
    r"twitter\.com",
    r"x\.com",
    r"medium\.com",
    r"substack\.com",
    r"github\.com",
    r"tiktok\.com",
    r"linkedin\.com",
    r"facebook\.com",
    r"nytimes\.com",
    r"bbc\.co\.uk",
    r"theguardian\.com",
    r"bloomberg\.com",
    r"cnn\.com",
    r"npr\.org",
    r"podcasts\.apple\.com",
    r"open\.spotify\.com",
    r"pocketcasts\.com",
    r"castbox\.fm",
    r"overcast\.fm",
    r"player\.fm",
    r"soundcloud\.com",
    r"stitcher\.com",
    r"simplecast\.com",
    r"buzzsprout\.com",
    r"anchor\.fm",
    r"rss\.com",
    r"ted\.com",
    r"tedtalks\.com",
    r"arxiv\.org",
    r"doi\.org",
    r"nature\.com",
    r"sciencedirect\.com",
    r"springer\.com",
    r"acm\.org",
    r"ieee\.org",
    r"jstor\.org",
    r"wikipedia\.org",
    r"en\.wikipedia\.org",
    r"news\.ycombinator\.com",
    r"producthunt\.com",
    r"dev\.to",
    r"hashnode\.com",
    r"blogspot\.com",
    r"wordpress\.com",
    r"substack\.com",
    r"mailchi\.mp",
    r"tinyletter\.com",
    r"buttondown\.email",
    r"getrevue\.co",
    r"ghost\.io",
    r"notion\.so",
    r"airtable\.com",
    r"figma\.com",
    r"canva\.com",
    r"loom\.com",
    r"vimeo\.com",
    r"slideshare\.net",
    r"dropbox\.com",
    r"drive\.google\.com",
    r"docs\.google\.com",
    r"medium\.com",
    r"mirror\.xyz",
    r"gumroad\.com",
    r"patreon\.com",
    r"buymeacoffee\.com",
    r"ko-fi\.com",
    r"kickstarter\.com",
    r"indiegogo\.com",
    r"eventbrite\.com",
    r"meetup\.com",
    r"eventful\.com",
    r"zoom\.us",
    r"webex\.com",
    r"teams\.microsoft\.com",
    r"slack\.com",
    r"discord\.com",
    r"telegram\.org",
    r"whatsapp\.com",
    r"signal\.org",
    r"messenger\.com",
    r"snapchat\.com",
    r"pinterest\.com",
    r"tumblr\.com",
    r"quora\.com",
    r"stackexchange\.com",
    r"stackoverflow\.com",
    r"superuser\.com",
    r"serverfault\.com",
    r"askubuntu\.com",
    r"mathoverflow\.net",
    r"github\.com",
    r"gitlab\.com",
    r"bitbucket\.org",
    r"npmjs\.com",
    r"pypi\.org",
    r"rubygems\.org",
    r"crates\.io",
    r"packagist\.org",
    r"docker\.com",
    r"hub\.docker\.com",
    r"kaggle\.com",
    r"colab\.research\.google\.com",
    r"replit\.com",
    r"codesandbox\.io",
    r"glitch\.com",
    r"observablehq\.com",
    r"jsfiddle\.net",
    r"codepen\.io",
    r"hackerrank\.com",
    r"leetcode\.com",
    r"codewars\.com",
    r"exercism\.io",
    r"edx\.org",
    r"coursera\.org",
    r"udemy\.com",
    r"khanacademy\.org",
    r"pluralsight\.com",
    r"datacamp\.com",
    r"brilliant\.org",
    r"futurelearn\.com",
    r"skillshare\.com",
    r"udacity\.com",
    r"codecademy\.com",
    r"linkedinlearning\.com",
    r"openai\.com",
    r"deepmind\.com",
    r"anthropic\.com",
    r"huggingface\.co",
    r"replicate\.com",
    r"stability\.ai",
    r"midjourney\.com",
    r"runwayml\.com",
    r"open\.ai",
    r"perplexity\.ai",
    r"phind\.com",
    r"you\.com",
    r"bing\.com",
    r"bard\.google\.com",
    r"chatgpt\.com",
    r"claude\.ai",
    r"pi\.ai",
    r"character\.ai",
    r"janitorai\.com",
    r"civitai\.com",
    r"poe\.com",
    r"quillbot\.com",
    r"grammarly\.com",
    r"deepl\.com",
    r"reverso\.net",
    r"linguee\.com",
    r"translate\.google\.com",
    r"dict\.cc",
    r"cambridge\.org",
    r"merriam-webster\.com",
    r"dictionary\.com",
    r"thesaurus\.com",
    r"wiktionary\.org",
    r"urban\.dictionary\.com",
    r"wolframalpha\.com",
    r"desmos\.com",
    r"geogebra\.org",
    r"symbolab\.com",
    r"mathway\.com",
    r"photomath\.com",
    r"brilliant\.org",
    r"khanacademy\.org",
    r"projecteuler\.net",
    r"artofproblemsolving\.com",
    r"mathisfun\.com",
    r"purplemath\.com",
    r"mathplanet\.com",
    r"mathsisfun\.com",
    r"mathworld\.wolfram\.com",
    r"mathoverflow\.net",
    r"desmos\.com",
    r"geogebra\.org",
    r"symbolab\.com",
    r"mathway\.com",
    r"photomath\.com",
    r"brilliant\.org",
    r"khanacademy\.org",
    r"projecteuler\.net",
    r"artofproblemsolving\.com",
    r"mathisfun\.com",
    r"purplemath\.com",
    r"mathplanet\.com",
    r"mathsisfun\.com",
    r"mathworld\.wolfram\.com",
    r"mathoverflow\.net",
]

SUPPORTED_DOMAINS_REGEX = re.compile(r"(" + r"|".join(SUPPORTED_DOMAINS) + r")", re.IGNORECASE)

class ClipCreateRequest(BaseModel):
    source_url: HttpUrl = Field(..., description="The URL to be clipped.")
    media_type: Literal["link"] = Field("link", description="Type of media. Only 'link' supported for now.")

    @field_validator("source_url")
    @classmethod
    def validate_supported_url(cls, v):
        if not SUPPORTED_DOMAINS_REGEX.search(v.host):
            raise ValueError(f"URL domain not supported for ingest: {v.host}")
        return v

class ClipCreateResponse(BaseModel):
    clip_id: str
    status: Literal["queued"]

class ClipDuplicateResponse(BaseModel):
    detail: str = Field("Link already saved by user", description="Duplicate link error message.")
    clip_id: str 